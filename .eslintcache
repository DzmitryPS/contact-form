[{"D:\\ROOT\\contact\\src\\index.js":"1","D:\\ROOT\\contact\\src\\App.js":"2","D:\\ROOT\\contact\\src\\ContactForm.js":"3"},{"size":196,"mtime":1610801930184,"results":"4","hashOfConfig":"5"},{"size":98,"mtime":1610803399716,"results":"6","hashOfConfig":"5"},{"size":4861,"mtime":1610807573030,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"2s24t3",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\ROOT\\contact\\src\\index.js",[],["16","17"],"D:\\ROOT\\contact\\src\\App.js",[],"D:\\ROOT\\contact\\src\\ContactForm.js",["18","19","20","21","22"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/* here i play with styled components */\r\n/* SYNTAX: const SomeName = styled.something`some css bullshit` */\r\n/* step 1: i want all divs that are red */\r\n/* const StyledDiv = styled.div `\r\nbackground-color: red;` */\r\n/* step 2: i want red-green-red */\r\n/* const StyledDivRed = styled.div`\r\n  background-color: red;\r\n`;\r\nconst StyledDivGreen = styled.div`\r\n  background-color: green;\r\n`; */\r\n/* step 3: i dont like writing 2 components just for a stupid background. i want a component that is sometimes red and sometimes green */\r\nconst StyledDiv = styled.div`\r\n  /* explanation */\r\n  /* background-color: sometimes red and sometimes green; */\r\n  /* part 1 */\r\n  /* background-color: $props => props.color === \"red\" && \"red\"};\r\n  background-color: $props => props.color === \"green\" && \"green\"}; */\r\n  /* final part */ /* my default color is yellow. but i sometimes want red or blue */\r\n\r\n  /* nested teiko version  */\r\n\r\n  /*   background-color: $p =>\r\n    p.color === \"red\" \r\n        ? \"red\" \r\n        : p.color === \"green\" \r\n            ? \"green\" \r\n            : \"yellow\"}; */\r\n\r\n  /* if you have 1000colors and dont like nesting stuff teiko style do this */\r\n  background-color: ${p => {\r\n    switch (p.color) {\r\n      case \"red\":\r\n        return \"red\";\r\n        break;\r\n      case \"green\":\r\n        return \"green\";\r\n        break;\r\n      default:\r\n        return \"yellow\";\r\n    }\r\n  }};\r\n`;\r\n/* yuri exercise */\r\n/* i want you to style me some text. what i want:\r\nname label       text shoud look good in aqua   i want this text to be 24px  \r\nemail label      text shoud look good in red    this should be 24 px         \r\nmessage label    text shoud look good in blue   this should be 24        \r\nbutton text      text should be black           i want super big text. 50px\r\n*/\r\n\r\nconst MyTeacherIsBeautiful = styled.p`\r\n  color: ${p => {\r\n    switch (p.color) {\r\n      case \"red\":\r\n        return \"red\";\r\n        break;\r\n      case \"blue\":\r\n        return \"blue\";\r\n        break;\r\n      case \"black\":\r\n        return \"black\";\r\n        break;\r\n      default:\r\n        return \"aqua\";\r\n    }\r\n  }};\r\n  font-size: ${p => (p.size === \"SUPERBIG\" ? \"50px\" : \"24px\")};\r\n  /* extra: if i have a big text i think it is important. so i want it to be bold */\r\n  font-weight: ${p => p.size === \"SUPERBIG\" && \"bold\"};\r\n`;\r\n\r\nconst ContactForm = () => {\r\n  const [status, setStatus] = useState(\"Submit\"); //this is the initial text of the button\r\n  const handleSubmit = async e => {\r\n    //what happens if i cick on the button\r\n    e.preventDefault(); //no refresh\r\n    setStatus(\"Sending...\"); //change the thext (line4) to sending\r\n    const { name, email, message } = e.target.elements;\r\n    let details = {\r\n      //put what user wrote inside an object called details\r\n      name: name.value,\r\n      email: email.value,\r\n      message: message.value,\r\n    };\r\n    let response = await fetch(\"http://localhost:5000/contact\", {\r\n      //after i got some data send them to the backend (but backend is not ready yet. we will work on it later)\r\n      //localhost5000 will store our backend. here we are just saying to send some stuff to back end. but back end DOES NOT KNOW what to do with those stuff for now\r\n      method: \"POST\", // i am sending some stuff to be\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n      },\r\n      body: JSON.stringify(details), //im sending details as a json.stringify\r\n    });\r\n    setStatus(\"Submit\");\r\n    let result = await response.json(); //backend is sending something back to me. i want to look at it\r\n    alert(result.status); //and i want to alert something that is inside .status of it (i still need to write it in the backend part, but it will be the message of me saying \"message sent :D\")\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <StyledDiv color=\"red\">\r\n        {/* i dont neet this div but i like it and copypasted it. lets keep it for now */}\r\n        <label htmlFor=\"name\">\r\n          <MyTeacherIsBeautiful>Name:</MyTeacherIsBeautiful>\r\n        </label>\r\n        <input type=\"text\" id=\"name\" required />\r\n      </StyledDiv>\r\n      <StyledDiv color=\"green\">\r\n        <label htmlFor=\"email\">\r\n          <MyTeacherIsBeautiful color=\"red\">Email:</MyTeacherIsBeautiful>\r\n        </label>\r\n        <input type=\"email\" id=\"email\" required />\r\n      </StyledDiv>\r\n      <StyledDiv>\r\n        <label htmlFor=\"message\">\r\n          <MyTeacherIsBeautiful color=\"blue\">Message:</MyTeacherIsBeautiful>\r\n        </label>\r\n        <textarea id=\"message\" required />\r\n      </StyledDiv>\r\n      <button type=\"submit\">\r\n        <MyTeacherIsBeautiful color=\"black\" size=\"SUPERBIG\">\r\n          {status}\r\n        </MyTeacherIsBeautiful>\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":39,"column":9,"nodeType":"29","messageId":"30","endLine":39,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":42,"column":9,"nodeType":"29","messageId":"30","endLine":42,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":61,"column":9,"nodeType":"29","messageId":"30","endLine":61,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":64,"column":9,"nodeType":"29","messageId":"30","endLine":64,"endColumn":15},{"ruleId":"27","severity":1,"message":"28","line":67,"column":9,"nodeType":"29","messageId":"30","endLine":67,"endColumn":15},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation"]